# React Async Call

[![npm version][npm-badge]][npm]
[![Build Status][build-badge]][build]
[![Code Coverage][coverage-badge]][coverage]
[![MIT License][license-badge]][license]
[![size][size-badge]][unpkg-dist]
[![gzip size][gzip-badge]][unpkg-dist]
[![module formats: umd, cjs, and es][module-formats-badge]][unpkg-dist]

Declarative promise handling in React.

## Table of Content
  * [Motivation](#motivation)
  * [Install](#install)
  * [Usage](#usage)
    * [Hello World](#hello-world)
    * [Data Fetching](#data-fetching)
    * [Incremental Data Fetching](#incremental-data-fetching)
  * [API Reference](#api-reference)
  * [Recipes](#recipes)
    * [Memoization](#memoization)
  * [Change Log](#change-log)
  * [Credits](#credits)

## Motivation

Handling promise-returning functions (for example, [`fetch`][fetch-api]) is not hard to do in React application. There are several packages like [holen][holen] or [React Request][react-request] for simplifying such kind of tasks but theirs authors try to impose their own vision on various aspects of data fetching. For instance, [React Request][react-request] has a cache for HTTP requests but what will happen if you decide to change caching strategy? React Async Call tries to sharpen the edges. This is minimalistic package that can be used not only for data fetching but also for handling any promise-returning functions.

## Install

### Using npm

`npm i react-async-call --save`

Then, use it as usual:

```JS
// using ES6 modules
import createAsyncCallComponent from 'react-async-call'

// using CommonJS modules
var createAsyncCallComponent = require('react-async-call').createAsyncCallComponent
```

It's worth to note that you should also have `react` and `prop-types` packages installed because `react-async-call` uses them as peer dependencies.

### UMD build

The UMD build is also available on [unpkg][unpkg]:

```HTML
<script src="https://unpkg.com/react"></script>
<script src="https://unpkg.com/prop-types"></script>
<script src="https://unpkg.com/react-async-call"></script>
```

The package is avalable on `window.ReactAsyncCall`

## Usage

### Hello World

* [JavaScript Example](https://codesandbox.io/s/y7349vl4oj)
* [TypeScript Example](https://codesandbox.io/s/w76rq8jjx8)

```jsx
const AsyncCall = createAsyncCallComponent(value => Promise.resolve(42))

const Example = () => (
  <AsyncCall>
    <AsyncCall.Running>
      <div>Loading...</div>
    </AsyncCall.Running>
    <AsyncCall.Resolved>{({ result }) => <div>The result of function call is {result}</div>}</AsyncCall.Resolved>
    <AsyncCall.Rejected>{({ rejectReason }) => <div>Error: {rejectReason}</div>}</AsyncCall.Rejected>
  </AsyncCall>
)
```

### Data Fetching

* [JavaScript Example](https://codesandbox.io/s/vn8qmr43yy)
* [TypeScript Example](https://codesandbox.io/s/ryxwnkl34)

```jsx
const fetchUser = userName =>
  fetch(`https://api.github.com/users/${userName}`).then(data => {
    if (data.ok) {
      return data.json();
    }
    throw new Error(data.statusText);
  });

const AsyncCall = createAsyncCallComponent(fetchUser);

class App extends React.Component {
  state = {
    userName: "kuzn-ilya"
  };

  render() {
    return (
      <AsyncCall params={this.state.userName}>
        <div>
          <input
            value={this.state.userName}
            onChange={e => this.setState({ userName: e.target.value })}
          />
          <AsyncCall.Running>
            <div>Loading...</div>
          </AsyncCall.Running>
          <AsyncCall.Resolved>
            {({ result }) => (
              <div>
                <div>name: {result.name}</div>
                <img alt="avatar" width="64px" src={result.avatar_url} />
                <div>
                  url: <a href={result.html_url}>{result.html_url}</a>
                </div>
              </div>
            )}
          </AsyncCall.Resolved>
          <AsyncCall.Rejected>
            {({ rejectReason }) => <div>Error: {rejectReason.message}</div>}
          </AsyncCall.Rejected>
        </div>
      </AsyncCall>
    );
  }
}
```

### Incremental Data Fetching

* [JavaScript Example](https://codesandbox.io/s/mzzvlmj65y)
* [TypeScript Example](https://codesandbox.io/s/5y3m6mrx9p)

# API Reference

## Exported Members

{{#function name="createAsyncCallComponent"}}
{{>docs~}}
{{/function~}}

## React Components

{{#class name="AsyncCall"}}
{{>docs~}}
{{/class~}}

## Function Signatures

{{#identifiers~}}
  {{#if (isTypeDefinition)~}}
{{>docs~}}
  {{/if~}}
{{/identifiers~}}

## Recipes
### Memoization

Say, you have a promise-returning function for fetching something from a particular end-point and render its result via `react-async-call`:
```jsx
const fetchResource = id => fetch(`https://<api_url>/${id}`)

const AsyncCall = createAsyncCallComponent(fetchResource)

...

```

You can easily cache results of calling `fetchResource` function with the same arguments by wrapping it into [`lodash.memoize`][lodash-memoize] (or similar function from other package, e.g. from [`ramda`][ramda-memoize]):
```jsx
import memoize from 'lodash.memoize' // or import { memoize } from 'ramda'

const fetchResource = memoize(id => fetch(`https://<api_url>/${id}`))

...

```

## Change Log

[You can find change log here][changelog]

## Credits

Great thanks to [@kitos](https://github.com/kitos) and [@ventrz](https://github.com/ventrz) for their invaluable help, support and bright ideas!

[npm-badge]: https://badge.fury.io/js/react-async-call.svg
[npm]: https://www.npmjs.com/package/react-async-call
[build-badge]: https://travis-ci.org/kuzn-ilya/react-async-call.svg?branch=master
[build]: https://travis-ci.org/kuzn-ilya/react-async-call
[coverage-badge]: https://codecov.io/gh/kuzn-ilya/react-async-call/branch/master/graph/badge.svg
[coverage]: https://codecov.io/gh/kuzn-ilya/react-async-call
[license-badge]: https://img.shields.io/npm/l/react-async-call.svg
[license]: https://github.com/kuzn-ilya/react-async-call/blob/master/LICENSE
[size-badge]: http://img.badgesize.io/https://unpkg.com/react-async-call/umd/react-async-call.production.min.js?label=size
[gzip-badge]: http://img.badgesize.io/https://unpkg.com/react-async-call/umd/react-async-call.production.min.js?compression=gzip&label=gzip%20size
[module-formats-badge]: https://img.shields.io/badge/module%20formats-umd%2C%20cjs-green.svg
[unpkg-dist]: https://unpkg.com/react-async-call/
[unpkg]: https:/unpkg.com
[changelog]: https://github.com/kuzn-ilya/react-async-call/blob/master/docs/CHANGELOG.md
[fetch-api]: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
[holen]: https://github.com/tkh44/holen
[react-request]: https://github.com/jamesplease/react-request
[lodash-memoize]: https://lodash.com/docs/#memoize
[ramda-memoize]: https://ramdajs.com/docs/#memoize